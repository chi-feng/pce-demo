// utility functions
var range = (n) => [...Array(n).keys()];
var cartprod = (a, b, ...c) => (b ? cartprod([].concat(...a.map(d => b.map(e => [].concat(d, e)))), ...c) : a);
var sum = (a, b) => a + b;
var product = (a, b) => a * b;
const factorial = (n) => (n == 0 || n == 1) ? 1 : factorial(n-1) * n;

// enum type for distributions
const germType = { NORMAL: 0, UNIFORM: 1 };

class PCExpansion {

  constructor(f, germs, orders, totalOrder) {

    this.f = f;
    this.germs = germs;
    this.orders = orders;
    this.totalOrder = totalOrder;

    // multiindexSet is a cartesian product of ranges, filtered by totalOrder
    this.multiindexSet = (totalOrder > 0) 
      ? cartprod.apply(null, this.orders.map(order => range(order+1))).filter(multiindex => multiindex.reduce(sum) <= totalOrder)
      : cartprod.apply(null, this.orders.map(order => range(order+1)));

    // compute 1d quadrature rules
    this.quads = this.germs.map((germ, i) => range(GaussianQuadrature.hermite.length).map(j => new GaussianQuadrature(germ, j + 1)));

    // compute tensor quadrature rules as a cartesian product according to multiindex
    this.tensorQuads = this.multiindexSet.map((multiindex) => ({ 
      abscissae: cartprod.apply(null, this.germs.map((germ, i) => this.quads[i][this.quadOrder(multiindex[i])].abscissae)), 
      weights: cartprod.apply(null, this.germs.map((germ, i) => this.quads[i][this.quadOrder(multiindex[i])].weights)) 
    }));

    // compute norms of each tensor quadrature as a product of norms of univariate quadratures
    this.norms = this.multiindexSet.map((multiindex, k) => this.germs.map((germ, i) => OrthogonalPolynomial.norm(germ, multiindex[i])).reduce(product));
    
    // calculate PCE coefficients using quadrature
    this.coeffs = this.multiindexSet.map((multiindex, k) => 
      this.tensorQuads[k].abscissae.map((abscissa, j) => 
        this.tensorQuads[k].weights[j].reduce(product) * this.f(abscissa) * this.evalTensorPoly(multiindex, abscissa)
      ).reduce(sum) / this.norms[k]
    );

  }

  // evaluate the tensor product polynomial described by multiindex at a value of \xi 
  evalTensorPoly(multiindex, x) {
    return this.germs.map((germ, i) => OrthogonalPolynomial.evaluate(germ, multiindex[i], x[i])).reduce(product);
  }

  // evaluate the PCE for a given value of \xi 
  evaluate(x) {
    return this.coeffs.map((coeff, k) => coeff * this.evalTensorPoly(this.multiindexSet[k], x)).reduce(sum);
  }

  // get the mean and variance of the PCE
  getMoments() {
    return { 
      mean: this.coeffs[0], 
      variance: range(this.coeffs.length).slice(1).map(k => Math.pow(this.coeffs[k], 2) * this.norms[k]).reduce(sum) 
    };
  }

  // get the quadrature order to numerically integrate polynomial (order i) * target function
  quadOrder(i) {
    return Math.ceil((i + this.totalOrder + 1) / 2);
  }

}

class OrthogonalPolynomial {

  // evaluate polynomial using recurrence relation
  static evaluate(type, order, x) {
    if (order == 0) return 1;
    if (order == 1) return x;
    let yn2 = 1, yn1 = x, y = 0;
    for (let k = 2; k <= order; k++) {
      switch (type) {
        case germType.NORMAL: y = x * yn1 - (k - 1) * yn2; break; // Hermite (probabilist's)
        case germType.UNIFORM: y = ((2 * k - 1) * x * yn1 - (k - 1) * yn2) / k; break; // Legendre
      }
      yn2 = yn1;
      yn1 = y;
    }
    return y;
  }

  static norm(type, order) {
    switch (type) {
      case germType.NORMAL: return factorial(order); break; // Hermite
      case germType.UNIFORM: return 2 / (2 * order + 1); break; // Legendre
    }
  }

}

class GaussianQuadrature {

  constructor(type, order) {
    this.order = order;
    switch (type) {
      case germType.NORMAL: 
        this.abscissae = GaussianQuadrature.hermite[order - 1].abscissae;
        this.weights = GaussianQuadrature.hermite[order - 1].weights;
        break;
      case germType.UNIFORM:
        this.abscissae = GaussianQuadrature.legendre[order - 1].abscissae;
        this.weights = GaussianQuadrature.legendre[order - 1].weights;
        break;
    }
  }

}

GaussianQuadrature.hermite = [
  { abscissae: [  0.00000000e+00,], 
    weights:   [  1.00000000e+00, ] },
  { abscissae: [ -1.00000000e+00,  1.00000000e+00,], 
    weights:   [  5.00000000e-01,  5.00000000e-01, ] },
  { abscissae: [ -1.73205081e+00, -2.06976446e-16,  1.73205081e+00,], 
    weights:   [  1.66666667e-01,  6.66666667e-01,  1.66666667e-01, ] },
  { abscissae: [ -2.33441422e+00, -7.41963784e-01,  7.41963784e-01,  2.33441422e+00,], 
    weights:   [  4.58758548e-02,  4.54124145e-01,  4.54124145e-01,  4.58758548e-02, ] },
  { abscissae: [ -2.85697001e+00, -1.35562618e+00,  3.86574997e-17,  1.35562618e+00,  2.85697001e+00,], 
    weights:   [  1.12574113e-02,  2.22075922e-01,  5.33333333e-01,  2.22075922e-01,  1.12574113e-02, ] },
  { abscissae: [ -3.32425743e+00, -1.88917588e+00, -6.16706590e-01,  6.16706590e-01,  1.88917588e+00,  3.32425743e+00,], 
    weights:   [  2.55578440e-03,  8.86157460e-02,  4.08828470e-01,  4.08828470e-01,  8.86157460e-02,  2.55578440e-03, ] },
  { abscissae: [ -3.75043972e+00, -2.36675941e+00, -1.15440539e+00,  1.15327337e-16,  1.15440539e+00,  2.36675941e+00,  3.75043972e+00,], 
    weights:   [  5.48268856e-04,  3.07571240e-02,  2.40123179e-01,  4.57142857e-01,  2.40123179e-01,  3.07571240e-02,  5.48268856e-04, ] },
  { abscissae: [ -4.14454719e+00, -2.80248586e+00, -1.63651904e+00, -5.39079811e-01,  5.39079811e-01,  1.63651904e+00,  2.80248586e+00,  4.14454719e+00,], 
    weights:   [  1.12614538e-04,  9.63522012e-03,  1.17239908e-01,  3.73012258e-01,  3.73012258e-01,  1.17239908e-01,  9.63522012e-03,  1.12614538e-04, ] },
  { abscissae: [ -4.51274586e+00, -3.20542900e+00, -2.07684798e+00, -1.02325566e+00, -5.69133976e-17,  1.02325566e+00,  2.07684798e+00,  3.20542900e+00,  4.51274586e+00,], 
    weights:   [  2.23458440e-05,  2.78914132e-03,  4.99164068e-02,  2.44097503e-01,  4.06349206e-01,  2.44097503e-01,  4.99164068e-02,  2.78914132e-03,  2.23458440e-05, ] },
  { abscissae: [ -4.85946283e+00, -3.58182348e+00, -2.48432584e+00, -1.46598909e+00, -4.84935708e-01,  4.84935708e-01,  1.46598909e+00,  2.48432584e+00,  3.58182348e+00,  4.85946283e+00,], 
    weights:   [  4.31065263e-06,  7.58070934e-04,  1.91115805e-02,  1.35483703e-01,  3.44642335e-01,  3.44642335e-01,  1.35483703e-01,  1.91115805e-02,  7.58070934e-04,  4.31065263e-06, ] },
  { abscissae: [ -5.18800122e+00, -3.93616661e+00, -2.86512316e+00, -1.87603502e+00, -9.28868997e-01,  3.53815498e-16,  9.28868997e-01,  1.87603502e+00,  2.86512316e+00,  3.93616661e+00,  5.18800122e+00,], 
    weights:   [  8.12184979e-07,  1.95671930e-04,  6.72028524e-03,  6.61387461e-02,  2.42240300e-01,  3.69408369e-01,  2.42240300e-01,  6.61387461e-02,  6.72028524e-03,  1.95671930e-04,  8.12184979e-07, ] },
  { abscissae: [ -5.50090170e+00, -4.27182585e+00, -3.22370983e+00, -2.25946445e+00, -1.34037520e+00, -4.44403002e-01,  4.44403002e-01,  1.34037520e+00,  2.25946445e+00,  3.22370983e+00,  4.27182585e+00,  5.50090170e+00,], 
    weights:   [  1.49992717e-07,  4.83718492e-05,  2.20338069e-03,  2.91166879e-02,  1.46967048e-01,  3.21664362e-01,  3.21664362e-01,  1.46967048e-01,  2.91166879e-02,  2.20338069e-03,  4.83718492e-05,  1.49992717e-07, ] },
  { abscissae: [ -5.80016725e+00, -4.59139845e+00, -3.56344438e+00, -2.62068997e+00, -1.72541838e+00, -8.56679494e-01,  2.10695912e-16,  8.56679494e-01,  1.72541838e+00,  2.62068997e+00,  3.56344438e+00,  4.59139845e+00,  5.80016725e+00,], 
    weights:   [  2.72262764e-08,  1.15265965e-05,  6.81236350e-04,  1.17705605e-02,  7.91689559e-02,  2.37871523e-01,  3.40992341e-01,  2.37871523e-01,  7.91689559e-02,  1.17705605e-02,  6.81236350e-04,  1.15265965e-05,  2.72262764e-08, ] },
  { abscissae: [ -6.08740955e+00, -4.89693640e+00, -3.88692458e+00, -2.96303658e+00, -2.08834475e+00, -1.24268896e+00, -4.12590458e-01,  4.12590458e-01,  1.24268896e+00,  2.08834475e+00,  2.96303658e+00,  3.88692458e+00,  4.89693640e+00,  6.08740955e+00,], 
    weights:   [  4.86816126e-09,  2.66099134e-06,  2.00339554e-04,  4.42891911e-03,  3.86501088e-02,  1.54083340e-01,  3.02634627e-01,  3.02634627e-01,  1.54083340e-01,  3.86501088e-02,  4.42891911e-03,  2.00339554e-04,  2.66099134e-06,  4.86816126e-09, ] },
  { abscissae: [ -6.36394789e+00, -5.19009359e+00, -4.19620771e+00, -3.28908242e+00, -2.43243683e+00, -1.60671007e+00, -7.99129068e-01, -5.43261423e-16,  7.99129068e-01,  1.60671007e+00,  2.43243683e+00,  3.28908242e+00,  4.19620771e+00,  5.19009359e+00,  6.36394789e+00,], 
    weights:   [  8.58964990e-10,  5.97541960e-07,  5.64214641e-05,  1.56735750e-03,  1.73657745e-02,  8.94177954e-02,  2.32462294e-01,  3.18259518e-01,  2.32462294e-01,  8.94177954e-02,  1.73657745e-02,  1.56735750e-03,  5.64214641e-05,  5.97541960e-07,  8.58964990e-10, ] },
  { abscissae: [ -6.63087820e+00, -5.47222571e+00, -4.49295530e+00, -3.60087362e+00, -2.76024505e+00, -1.95198035e+00, -1.16382910e+00, -3.86760605e-01,  3.86760605e-01,  1.16382910e+00,  1.95198035e+00,  2.76024505e+00,  3.60087362e+00,  4.49295530e+00,  5.47222571e+00,  6.63087820e+00,], 
    weights:   [  1.49781472e-10,  1.30947322e-07,  1.53000322e-05,  5.25984927e-04,  7.26693760e-03,  4.72847524e-02,  1.58338373e-01,  2.86568521e-01,  2.86568521e-01,  1.58338373e-01,  4.72847524e-02,  7.26693760e-03,  5.25984927e-04,  1.53000322e-05,  1.30947322e-07,  1.49781472e-10, ] },
  { abscissae: [ -6.88912244e+00, -5.74446008e+00, -4.77853159e+00, -3.90006572e+00, -3.07379718e+00, -2.28101944e+00, -1.50988331e+00, -7.51842601e-01,  5.55305768e-16,  7.51842601e-01,  1.50988331e+00,  2.28101944e+00,  3.07379718e+00,  3.90006572e+00,  4.77853159e+00,  5.74446008e+00,  6.88912244e+00,], 
    weights:   [  2.58431492e-11,  2.80801612e-08,  4.01267945e-06,  1.68491432e-04,  2.85894606e-03,  2.30866570e-02,  9.74063712e-02,  2.26706308e-01,  2.99538370e-01,  2.26706308e-01,  9.74063712e-02,  2.30866570e-02,  2.85894606e-03,  1.68491432e-04,  4.01267945e-06,  2.80801612e-08,  2.58431492e-11, ] },
  { abscissae: [ -7.13946485e+00, -6.00774591e+00, -5.05407269e+00, -4.18802023e+00, -3.37473654e+00, -2.59583369e+00, -1.83977992e+00, -1.09839552e+00, -3.65245756e-01,  3.65245756e-01,  1.09839552e+00,  1.83977992e+00,  2.59583369e+00,  3.37473654e+00,  4.18802023e+00,  5.05407269e+00,  6.00774591e+00,  7.13946485e+00,], 
    weights:   [  4.41658877e-12,  5.90548848e-09,  1.02155240e-06,  5.17989614e-05,  1.06548480e-03,  1.05165178e-02,  5.48966325e-02,  1.60685304e-01,  2.72783235e-01,  2.72783235e-01,  1.60685304e-01,  5.48966325e-02,  1.05165178e-02,  1.06548480e-03,  5.17989614e-05,  1.02155240e-06,  5.90548848e-09,  4.41658877e-12, ] },
];

GaussianQuadrature.legendre = [
  { abscissae: [  0.00000000e+00,], 
    weights:   [  2.00000000e+00, ] },
  { abscissae: [ -5.77350269e-01,  5.77350269e-01,], 
    weights:   [  1.00000000e+00,  1.00000000e+00, ] },
  { abscissae: [ -7.74596669e-01,  0.00000000e+00,  7.74596669e-01,], 
    weights:   [  5.55555556e-01,  8.88888889e-01,  5.55555556e-01, ] },
  { abscissae: [ -8.61136312e-01, -3.39981044e-01,  3.39981044e-01,  8.61136312e-01,], 
    weights:   [  3.47854845e-01,  6.52145155e-01,  6.52145155e-01,  3.47854845e-01, ] },
  { abscissae: [ -9.06179846e-01, -5.38469310e-01,  0.00000000e+00,  5.38469310e-01,  9.06179846e-01,], 
    weights:   [  2.36926885e-01,  4.78628670e-01,  5.68888889e-01,  4.78628670e-01,  2.36926885e-01, ] },
  { abscissae: [ -9.32469514e-01, -6.61209386e-01, -2.38619186e-01,  2.38619186e-01,  6.61209386e-01,  9.32469514e-01,], 
    weights:   [  1.71324492e-01,  3.60761573e-01,  4.67913935e-01,  4.67913935e-01,  3.60761573e-01,  1.71324492e-01, ] },
  { abscissae: [ -9.49107912e-01, -7.41531186e-01, -4.05845151e-01,  0.00000000e+00,  4.05845151e-01,  7.41531186e-01,  9.49107912e-01,], 
    weights:   [  1.29484966e-01,  2.79705391e-01,  3.81830051e-01,  4.17959184e-01,  3.81830051e-01,  2.79705391e-01,  1.29484966e-01, ] },
  { abscissae: [ -9.60289856e-01, -7.96666477e-01, -5.25532410e-01, -1.83434642e-01,  1.83434642e-01,  5.25532410e-01,  7.96666477e-01,  9.60289856e-01,], 
    weights:   [  1.01228536e-01,  2.22381034e-01,  3.13706646e-01,  3.62683783e-01,  3.62683783e-01,  3.13706646e-01,  2.22381034e-01,  1.01228536e-01, ] },
  { abscissae: [ -9.68160240e-01, -8.36031107e-01, -6.13371433e-01, -3.24253423e-01,  0.00000000e+00,  3.24253423e-01,  6.13371433e-01,  8.36031107e-01,  9.68160240e-01,], 
    weights:   [  8.12743884e-02,  1.80648161e-01,  2.60610696e-01,  3.12347077e-01,  3.30239355e-01,  3.12347077e-01,  2.60610696e-01,  1.80648161e-01,  8.12743884e-02, ] },
  { abscissae: [ -9.73906529e-01, -8.65063367e-01, -6.79409568e-01, -4.33395394e-01, -1.48874339e-01,  1.48874339e-01,  4.33395394e-01,  6.79409568e-01,  8.65063367e-01,  9.73906529e-01,], 
    weights:   [  6.66713443e-02,  1.49451349e-01,  2.19086363e-01,  2.69266719e-01,  2.95524225e-01,  2.95524225e-01,  2.69266719e-01,  2.19086363e-01,  1.49451349e-01,  6.66713443e-02, ] },
  { abscissae: [ -9.78228658e-01, -8.87062600e-01, -7.30152006e-01, -5.19096129e-01, -2.69543156e-01,  0.00000000e+00,  2.69543156e-01,  5.19096129e-01,  7.30152006e-01,  8.87062600e-01,  9.78228658e-01,], 
    weights:   [  5.56685671e-02,  1.25580369e-01,  1.86290211e-01,  2.33193765e-01,  2.62804545e-01,  2.72925087e-01,  2.62804545e-01,  2.33193765e-01,  1.86290211e-01,  1.25580369e-01,  5.56685671e-02, ] },
  { abscissae: [ -9.81560634e-01, -9.04117256e-01, -7.69902674e-01, -5.87317954e-01, -3.67831499e-01, -1.25233409e-01,  1.25233409e-01,  3.67831499e-01,  5.87317954e-01,  7.69902674e-01,  9.04117256e-01,  9.81560634e-01,], 
    weights:   [  4.71753364e-02,  1.06939326e-01,  1.60078329e-01,  2.03167427e-01,  2.33492537e-01,  2.49147046e-01,  2.49147046e-01,  2.33492537e-01,  2.03167427e-01,  1.60078329e-01,  1.06939326e-01,  4.71753364e-02, ] },
  { abscissae: [ -9.84183055e-01, -9.17598399e-01, -8.01578091e-01, -6.42349339e-01, -4.48492751e-01, -2.30458316e-01,  0.00000000e+00,  2.30458316e-01,  4.48492751e-01,  6.42349339e-01,  8.01578091e-01,  9.17598399e-01,  9.84183055e-01,], 
    weights:   [  4.04840048e-02,  9.21214998e-02,  1.38873510e-01,  1.78145981e-01,  2.07816048e-01,  2.26283180e-01,  2.32551553e-01,  2.26283180e-01,  2.07816048e-01,  1.78145981e-01,  1.38873510e-01,  9.21214998e-02,  4.04840048e-02, ] },
  { abscissae: [ -9.86283809e-01, -9.28434884e-01, -8.27201315e-01, -6.87292905e-01, -5.15248636e-01, -3.19112369e-01, -1.08054949e-01,  1.08054949e-01,  3.19112369e-01,  5.15248636e-01,  6.87292905e-01,  8.27201315e-01,  9.28434884e-01,  9.86283809e-01,], 
    weights:   [  3.51194603e-02,  8.01580872e-02,  1.21518571e-01,  1.57203167e-01,  1.85538397e-01,  2.05198464e-01,  2.15263853e-01,  2.15263853e-01,  2.05198464e-01,  1.85538397e-01,  1.57203167e-01,  1.21518571e-01,  8.01580872e-02,  3.51194603e-02, ] },
  { abscissae: [ -9.87992518e-01, -9.37273392e-01, -8.48206583e-01, -7.24417731e-01, -5.70972173e-01, -3.94151347e-01, -2.01194094e-01,  0.00000000e+00,  2.01194094e-01,  3.94151347e-01,  5.70972173e-01,  7.24417731e-01,  8.48206583e-01,  9.37273392e-01,  9.87992518e-01,], 
    weights:   [  3.07532420e-02,  7.03660475e-02,  1.07159220e-01,  1.39570678e-01,  1.66269206e-01,  1.86161000e-01,  1.98431485e-01,  2.02578242e-01,  1.98431485e-01,  1.86161000e-01,  1.66269206e-01,  1.39570678e-01,  1.07159220e-01,  7.03660475e-02,  3.07532420e-02, ] },
  { abscissae: [ -9.89400935e-01, -9.44575023e-01, -8.65631202e-01, -7.55404408e-01, -6.17876244e-01, -4.58016778e-01, -2.81603551e-01, -9.50125098e-02,  9.50125098e-02,  2.81603551e-01,  4.58016778e-01,  6.17876244e-01,  7.55404408e-01,  8.65631202e-01,  9.44575023e-01,  9.89400935e-01,], 
    weights:   [  2.71524594e-02,  6.22535239e-02,  9.51585117e-02,  1.24628971e-01,  1.49595989e-01,  1.69156519e-01,  1.82603415e-01,  1.89450610e-01,  1.89450610e-01,  1.82603415e-01,  1.69156519e-01,  1.49595989e-01,  1.24628971e-01,  9.51585117e-02,  6.22535239e-02,  2.71524594e-02, ] },
  { abscissae: [ -9.90575475e-01, -9.50675522e-01, -8.80239154e-01, -7.81514004e-01, -6.57671159e-01, -5.12690537e-01, -3.51231763e-01, -1.78484181e-01,  0.00000000e+00,  1.78484181e-01,  3.51231763e-01,  5.12690537e-01,  6.57671159e-01,  7.81514004e-01,  8.80239154e-01,  9.50675522e-01,  9.90575475e-01,], 
    weights:   [  2.41483029e-02,  5.54595294e-02,  8.50361483e-02,  1.11883847e-01,  1.35136368e-01,  1.54045761e-01,  1.68004102e-01,  1.76562705e-01,  1.79446470e-01,  1.76562705e-01,  1.68004102e-01,  1.54045761e-01,  1.35136368e-01,  1.11883847e-01,  8.50361483e-02,  5.54595294e-02,  2.41483029e-02, ] },
  { abscissae: [ -9.91565168e-01, -9.55823950e-01, -8.92602466e-01, -8.03704959e-01, -6.91687043e-01, -5.59770831e-01, -4.11751161e-01, -2.51886226e-01, -8.47750130e-02,  8.47750130e-02,  2.51886226e-01,  4.11751161e-01,  5.59770831e-01,  6.91687043e-01,  8.03704959e-01,  8.92602466e-01,  9.55823950e-01,  9.91565168e-01,], 
    weights:   [  2.16160135e-02,  4.97145489e-02,  7.64257303e-02,  1.00942044e-01,  1.22555207e-01,  1.40642915e-01,  1.54684675e-01,  1.64276484e-01,  1.69142383e-01,  1.69142383e-01,  1.64276484e-01,  1.54684675e-01,  1.40642915e-01,  1.22555207e-01,  1.00942044e-01,  7.64257303e-02,  4.97145489e-02,  2.16160135e-02, ] },
];

